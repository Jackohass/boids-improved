#version 460 core
layout (local_size_x = 10, local_size_y = 10, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D imgOutput;

layout (location = 0) uniform float t;                 /** Time */

const float confinementRadius = 10.0f;
const float cohesionRadius = 0.15f;
const float avoidanceRadius = 0.1f;
const float conformanceRadius = 0.25f;
//const int dimension = (int)(confinementRadius / conformanceRadius);

struct Boid {
	vec3 pos;
	vec3 vel;

	/*
	void move(const glm::vec3& p) {
		pos += p;
	}*/

	/*glm::mat4 getModel() {
		//Calculate the angle the boid needs to rotate to point forward
		//glm::vec3 forward(0, 1, 0);
		vec3 M(1.0f / 2.0f, glm::sqrt(2.0f / 3.0f) / 2.0f, 1.0f / (2.0f * glm::sqrt(3.0f)));
		vec3 forward = vec3(0.5, 1, 1.0f / (2.0f * glm::sqrt(3.0f))) - M;
		
		vec3 ref = glm::normalize(glm::cross(forward, vel));
		float angle = glm::orientedAngle(glm::normalize(forward), glm::normalize(vel), ref);

		glm::mat4 model = glm::translate(glm::mat4(1.0f), pos);
		model *= glm::eulerAngleYXZ(rot[1], rot[0], rot[2]);

		model = glm::rotate(model, angle, ref);
		return model;
	}*/
};

vec3 cohesion() {
	/*
		Find the center of mass amongst nearby boids, with nearby beind defined
		as those boids within a sphere centered on this boid with a given radius.
		Weight the boids effect on the center of mass by their inverse distance²

		Lastly calculate the vector required to move to said center
	*/
	const float radius = cohesionRadius;
	const float strength = 0.1f;
	const float epsilon = 1.0f / 10.0f;
	const float epsInvSqr = 1.0f / pow(epsilon, 2.0f);

	vec3 center = vec3(0.0, 0.0, 0.0);
	int numNear = 0;
	for(neighList : neigh){
		for(Boid *b : *neighList){
			if (b == &current) continue;
	
			float d = distance(current.pos, b->pos);
			if(d < radius){
				//TODO: This should probably be weighted by the inv square dist
				//float w = (d > epsilon) ? (1.0f / glm::pow(d, 2.0f)) / epsInvSqr : 1.0f;
	
				center += b->pos /* ((radius - d) / d)*/;
				numNear++;
			}
		}
	}

	//Find the averaged center, or self if no neighbours
	center = (numNear > 0) ? center / (float) numNear - current.pos : center;

	return center * strength;
}

vec3 avoidance(Boid& current, vector<vector<Boid *> *>& neigh){
	const float radius = avoidanceRadius;
	const float strength = 0.4f;

	vec3 res(0, 0, 0);

	for(vector<Boid *> *neighList : neigh){
		for(Boid *b : *neighList){
			if (b == &current) continue;
	
			float dist = distance(current.pos, b->pos);
	
			if(dist < radius){
				res -= (b->pos - current.pos) * ((radius - dist) /  dist);
			}
		}
	}

	return res * strength;
}

vec3 conformance(Boid& current, vector<vector<Boid *> *>& neigh){
	const float radius = conformanceRadius;
	const float strength = 0.2f;

	vec3 velocity(0, 0, 0);
	int numNear = 0;
	for(vector<Boid *> *neighList : neigh){
		for(Boid *b : *neighList){
			if (b == &current) continue;
	
			if(distance(current.pos, b->pos) < radius){
				//TODO: This should probably be weighted by the inv square dist
				velocity += b->vel;
				numNear++;
			}
		}
	}

	velocity = (numNear > 0) ? velocity / (float) numNear : current.vel;

	return (velocity - current.vel) * strength; 
}

vec3 confinement(Boid& current){
	const float strength = 0.1f;

	vec3 v(0, 0, 0);

	/*if(glm::length(current.pos) > confinementRadius){
		v = glm::normalize(-current.pos);
	}*/


	for(int i =  0; i < 3; i++){
		if(current.pos[i] < -confinementRadius) v[i] = 1;
		else if(current.pos[i] > confinementRadius) v[i] = -1;
	}

	if(v != vec3(0, 0, 0)) v = normalize(v);
	
	return v * strength;
}

vec3 clamp(vec3& original, vec3& increment, const float normalizer, const float dt){
	const float speedLimitUpper = 1.0f * normalizer;
	const float speedLimitLower = 0.1f * normalizer;

	vec3 newBoidVel = original + increment * normalizer * dt;
	vec3 newVel = 0.5f * increment * dt * normalizer + newBoidVel;
	if(length(newVel) > speedLimitUpper){
		newVel = normalize(newVel) * speedLimitUpper;
	}
	else if (length(newVel) < speedLimitLower) {
		newVel = normalize(newVel) * speedLimitLower;
	}

	if (length(newBoidVel) > speedLimitUpper) {
		newBoidVel = normalize(newBoidVel) * speedLimitUpper;
	}
	else if (length(newBoidVel) < speedLimitLower) {
		newBoidVel = normalize(newBoidVel) * speedLimitLower;
	}

	original = newBoidVel;
	return newVel;
}

vec3 drag(Boid& current) {
	const float drag = 0.1f;
	return -current.vel * drag;
}

void main() {
    vec4 value = vec4(0.0, 0.0, 0.0, 1.0);
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    
    float speed = 100;
    // the width of the texture
    float width = 1000;

    value.x = mod(float(texelCoord.x) + t * speed, width) / (gl_NumWorkGroups.x * gl_WorkGroupSize.x);
    value.y = float(texelCoord.y)/(gl_NumWorkGroups.y*gl_WorkGroupSize.y);
    imageStore(imgOutput, texelCoord, value);

	Boid& b = boids[i];
		vector<vector<Boid *> *>& neigh = neighbours[spatialCellsIndex(b.pos)];
		//getNeighbours(b.pos, neigh);

		vec3 a = cohesion(b, neigh);
		a += avoidance(b, neigh); 
		a += conformance(b, neigh);
		a += confinement(b);
		a += drag(b);

		//b.vel += v;
		//cout << i << ": " << "(" << b.vel[0] << ", " << b.vel[1] << ", " << b.vel[2] << ")" << endl;
		b.move(clamp(b.vel, a, normalizer, dt) * dt);
		//v = v0 + a * dt
		//p = 0.5 * dt * dt * a + dt * v = 0.5 * dt * dt + dt * v0 + a * dt * dt = 1.5*a*dt^2 + v0*dt
}